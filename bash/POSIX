6.11 Bash and POSIX
===================

6.11.1 What is POSIX?
---------------------

POSIX is the name for a family of standards based on Unix.  A number of
Unix services, tools, and functions are part of the standard, ranging
from the basic system calls and C library functions to common
applications and tools to system administration and management.

The POSIX Shell and Utilities standard was originally developed by IEEE
Working Group 1003.2 (POSIX.2).  The first edition of the 1003.2
standard was published in 1992.  It was merged with the original IEEE
1003.1 Working Group and is currently maintained by the Austin Group (a
joint working group of the IEEE, The Open Group and ISO/IEC SC22/WG15).
Today the Shell and Utilities are a volume within the set of documents
that make up IEEE Std 1003.1-2017, and thus the former POSIX.2 (from
1992) is now part of the current unified POSIX standard.

The Shell and Utilities volume concentrates on the command interpreter
interface and utility programs commonly executed from the command line
or by other programs.  The standard is freely available on the web at
<https://pubs.opengroup.org/onlinepubs/9699919799/utilities/contents.html>.

Bash is concerned with the aspects of the shell's behavior defined by
the POSIX Shell and Utilities volume.  The shell command language has of
course been standardized, including the basic flow control and program
execution constructs, I/O redirection and pipelines, argument handling,
variable expansion, and quoting.

The special builtins, which must be implemented as part of the shell to
provide the desired functionality, are specified as being part of the
shell; examples of these are ‘eval’ and ‘export’.  Other utilities
appear in the sections of POSIX not devoted to the shell which are
commonly (and in some cases must be) implemented as builtin commands,
such as ‘read’ and ‘test’.  POSIX also specifies aspects of the shell's
interactive behavior, including job control and command line editing.
Only vi-style line editing commands have been standardized; emacs
editing commands were left out due to objections.

6.11.2 Bash POSIX Mode
----------------------

Although Bash is an implementation of the POSIX shell specification,
there are areas where the Bash default behavior differs from the
specification.  The Bash “posix mode” changes the Bash behavior in these
areas so that it conforms to the standard more closely.

Starting Bash with the ‘--posix’ command-line option or executing ‘set
-o posix’ while Bash is running will cause Bash to conform more closely
to the POSIX standard by changing the behavior to match that specified
by POSIX in areas where the Bash default differs.

When invoked as ‘sh’, Bash enters POSIX mode after reading the startup
files.

The following list is what's changed when 'POSIX mode' is in effect:

  1. Bash ensures that the ‘POSIXLY_CORRECT’ variable is set.

  2. When a command in the hash table no longer exists, Bash will
     re-search ‘$PATH’ to find the new location.  This is also available
     with ‘shopt -s checkhash’.

  3. Bash will not insert a command without the execute bit set into the
     command hash table, even if it returns it as a (last-ditch) result
     from a ‘$PATH’ search.

  4. The message printed by the job control code and builtins when a job
     exits with a non-zero status is 'Done(status)'.

  5. The message printed by the job control code and builtins when a job
     is stopped is 'Stopped(SIGNAME)', where SIGNAME is, for example,
     ‘SIGTSTP’.

  6. Alias expansion is always enabled, even in non-interactive shells.

  7. Reserved words appearing in a context where reserved words are
     recognized do not undergo alias expansion.

  8. Alias expansion is performed when initially parsing a command
     substitution.  The default mode generally defers it, when enabled,
     until the command substitution is executed.  This means that
     command substitution will not expand aliases that are defined after
     the command substitution is initially parsed (e.g., as part of a
     function definition).

  9. The POSIX ‘PS1’ and ‘PS2’ expansions of ‘!’ to the history number
     and ‘!!’ to ‘!’ are enabled, and parameter expansion is performed
     on the values of ‘PS1’ and ‘PS2’ regardless of the setting of the
     ‘promptvars’ option.

  10. The POSIX startup files are executed (‘$ENV’) rather than the
     normal Bash files.

  11. Tilde expansion is only performed on assignments preceding a
     command name, rather than on all assignment statements on the line.

  12. The default history file is ‘~/.sh_history’ (this is the default
     value the shell assigns to ‘$HISTFILE’).

  13. Redirection operators do not perform filename expansion on the
     word in the redirection unless the shell is interactive.

  14. Redirection operators do not perform word splitting on the word in
     the redirection.

  15. Function names must be valid shell ‘name’s.  That is, they may not
     contain characters other than letters, digits, and underscores, and
     may not start with a digit.  Declaring a function with an invalid
     name causes a fatal syntax error in non-interactive shells.

  16. Function names may not be the same as one of the POSIX special
     builtins.

  17. Even if a shell function whose name contains a slash was defined
     before entering POSIX mode, the shell will not execute a function
     whose name contains one or more slashes.

  18. POSIX special builtins are found before shell functions during
     command lookup, including output printed by the ‘type’ and
     ‘command’ builtins.

  19. When printing shell function definitions (e.g., by ‘type’), Bash
     does not print the ‘function’ keyword.

  20. Literal tildes that appear as the first character in elements of
     the ‘PATH’ variable are not expanded as described above under *note
     Tilde Expansion::.

  21. The ‘time’ reserved word may be used by itself as a command.  When
     used in this way, it displays timing statistics for the shell and
     its completed children.  The ‘TIMEFORMAT’ variable controls the
     format of the timing information.

  22. When parsing and expanding a ${...} expansion that appears within
     double quotes, single quotes are no longer special and cannot be
     used to quote a closing brace or other special character, unless
     the operator is one of those defined to perform pattern removal.
     In this case, they do not have to appear as matched pairs.

  23. The parser does not recognize ‘time’ as a reserved word if the
     next token begins with a ‘-’.

  24. The ‘!’ character does not introduce history expansion within a
     double-quoted string, even if the ‘histexpand’ option is enabled.

  25. If a POSIX special builtin returns an error status, a
     non-interactive shell exits.  The fatal errors are those listed in
     the POSIX standard, and include things like passing incorrect
     options, redirection errors, variable assignment errors for
     assignments preceding the command name, and so on.

  26. The ‘unset’ builtin with the ‘-v’ option specified returns a fatal
     error if it attempts to unset a ‘readonly’ or ‘non-unsettable’
     variable, or encounters a variable name argument that is an invalid
     identifier, which causes a non-interactive shell to exit.

  27. When asked to unset a variable that appears in an assignment
     statement preceding the command, the ‘unset’ builtin attempts to
     unset a variable of the same name in the current or previous scope
     as well.  This implements the required "if an assigned variable is
     further modified by the utility, the modifications made by the
     utility shall persist" behavior.

  28. A non-interactive shell exits with an error status if a variable
     assignment error occurs when no command name follows the assignment
     statements.  A variable assignment error occurs, for example, when
     trying to assign a value to a readonly variable.

  29. A non-interactive shell exits with an error status if a variable
     assignment error occurs in an assignment statement preceding a
     special builtin, but not with any other simple command.  For any
     other simple command, the shell aborts execution of that command,
     and execution continues at the top level ("the shell shall not
     perform any further processing of the command in which the error
     occurred").

  30. A non-interactive shell exits with an error status if the
     iteration variable in a ‘for’ statement or the selection variable
     in a ‘select’ statement is a readonly variable or has an invalid
     name.

  31. Non-interactive shells exit if FILENAME in ‘.’ FILENAME is not
     found.

  32. Non-interactive shells exit if a syntax error in an arithmetic
     expansion results in an invalid expression.

  33. Non-interactive shells exit if a parameter expansion error occurs.

  34. Non-interactive shells exit if there is a syntax error in a script
     read with the ‘.’ or ‘source’ builtins, or in a string processed by
     the ‘eval’ builtin.

  35. While variable indirection is available, it may not be applied to
     the ‘#’ and ‘?’ special parameters.

  36. Expanding the ‘*’ special parameter in a pattern context where the
     expansion is double-quoted does not treat the ‘$*’ as if it were
     double-quoted.

  37. Assignment statements preceding POSIX special builtins persist in
     the shell environment after the builtin completes.

  38. The ‘command’ builtin does not prevent builtins that take
     assignment statements as arguments from expanding them as
     assignment statements; when not in POSIX mode, assignment builtins
     lose their assignment statement expansion properties when preceded
     by ‘command’.

  39. The ‘bg’ builtin uses the required format to describe each job
     placed in the background, which does not include an indication of
     whether the job is the current or previous job.

  40. The output of ‘kill -l’ prints all the signal names on a single
     line, separated by spaces, without the ‘SIG’ prefix.

  41. The ‘kill’ builtin does not accept signal names with a ‘SIG’
     prefix.

  42. The ‘export’ and ‘readonly’ builtin commands display their output
     in the format required by POSIX.

  43. If the ‘export’ and ‘readonly’ builtin commands get an argument
     that is not a valid identifier, and they are not operating on shell
     functions, they return an error.  This will cause a non-interactive
     shell to exit because these are special builtins.

  44. The ‘trap’ builtin displays signal names without the leading
     ‘SIG’.

  45. The ‘trap’ builtin doesn't check the first argument for a possible
     signal specification and revert the signal handling to the original
     disposition if it is, unless that argument consists solely of
     digits and is a valid signal number.  If users want to reset the
     handler for a given signal to the original disposition, they should
     use ‘-’ as the first argument.

  46. ‘trap -p’ without arguments displays signals whose dispositions
     are set to SIG_DFL and those that were ignored when the shell
     started, not just trapped signals.

  47. The ‘.’ and ‘source’ builtins do not search the current directory
     for the filename argument if it is not found by searching ‘PATH’.

  48. Enabling POSIX mode has the effect of setting the
     ‘inherit_errexit’ option, so subshells spawned to execute command
     substitutions inherit the value of the ‘-e’ option from the parent
     shell.  When the ‘inherit_errexit’ option is not enabled, Bash
     clears the ‘-e’ option in such subshells.

  49. Enabling POSIX mode has the effect of setting the ‘shift_verbose’
     option, so numeric arguments to ‘shift’ that exceed the number of
     positional parameters will result in an error message.

  50. When the ‘alias’ builtin displays alias definitions, it does not
     display them with a leading ‘alias ’ unless the ‘-p’ option is
     supplied.

  51. When the ‘set’ builtin is invoked without options, it does not
     display shell function names and definitions.

  52. When the ‘set’ builtin is invoked without options, it displays
     variable values without quotes, unless they contain shell
     metacharacters, even if the result contains nonprinting characters.

  53. When the ‘cd’ builtin is invoked in logical mode, and the pathname
     constructed from ‘$PWD’ and the directory name supplied as an
     argument does not refer to an existing directory, ‘cd’ will fail
     instead of falling back to physical mode.

  54. When the ‘cd’ builtin cannot change a directory because the length
     of the pathname constructed from ‘$PWD’ and the directory name
     supplied as an argument exceeds ‘PATH_MAX’ when canonicalized, ‘cd’
     will attempt to use the supplied directory name.

  55. The ‘pwd’ builtin verifies that the value it prints is the same as
     the current directory, even if it is not asked to check the file
     system with the ‘-P’ option.

  56. When listing the history, the ‘fc’ builtin does not include an
     indication of whether or not a history entry has been modified.

  57. The default editor used by ‘fc’ is ‘ed’.

  58. ‘fc’ treats extra arguments as an error instead of ignoring them.

  59. If there are too many arguments supplied to ‘fc -s’, ‘fc’ prints
     an error message and returns failure.

  60. The ‘type’ and ‘command’ builtins will not report a non-executable
     file as having been found, though the shell will attempt to execute
     such a file if it is the only so-named file found in ‘$PATH’.

  61. The ‘vi’ editing mode will invoke the ‘vi’ editor directly when
     the ‘v’ command is run, instead of checking ‘$VISUAL’ and
     ‘$EDITOR’.

  62. When the ‘xpg_echo’ option is enabled, Bash does not attempt to
     interpret any arguments to ‘echo’ as options.  Each argument is
     displayed, after escape characters are converted.

  63. The ‘ulimit’ builtin uses a block size of 512 bytes for the ‘-c’
     and ‘-f’ options.

  64. The arrival of ‘SIGCHLD’ when a trap is set on ‘SIGCHLD’ does not
     interrupt the ‘wait’ builtin and cause it to return immediately.
     The trap command is run once for each child that exits.

  65. The ‘read’ builtin may be interrupted by a signal for which a trap
     has been set.  If Bash receives a trapped signal while executing
     ‘read’, the trap handler executes and ‘read’ returns an exit status
     greater than 128.

  66. The ‘printf’ builtin uses ‘double’ (via ‘strtod’) to convert
     arguments corresponding to floating point conversion specifiers,
     instead of ‘long double’ if it's available.  The ‘L’ length
     modifier forces ‘printf’ to use ‘long double’ if it's available.

  67. Bash removes an exited background process's status from the list
     of such statuses after the ‘wait’ builtin is used to obtain it.

  68. A double quote character (‘"’) is treated specially when it
     appears in a backquoted command substitution in the body of a
     here-document that undergoes expansion.  That means, for example,
     that a backslash preceding a double quote character will escape it
     and the backslash will be removed.

  69. The ‘test’ builtin compares strings using the current locale when
     processing the ‘<’ and ‘>’ binary operators.

  70. The ‘test’ builtin's ‘-t’ unary primary requires an argument.
     Historical versions of ‘test’ made the argument optional in certain
     cases, and Bash attempts to accommodate those for backwards
     compatibility.

  71. Command substitutions don't set the ‘?’ special parameter.  The
     exit status of a simple command without a command word is still the
     exit status of the last command substitution that occurred while
     evaluating the variable assignments and redirections in that
     command, but that does not happen until after all of the
     assignments and redirections.

There is other POSIX behavior that Bash does not implement by default
even when in POSIX mode.  Specifically:

  1. The ‘fc’ builtin checks ‘$EDITOR’ as a program to edit history
     entries if ‘FCEDIT’ is unset, rather than defaulting directly to
     ‘ed’.  ‘fc’ uses ‘ed’ if ‘EDITOR’ is unset.

  2. A non-interactive shell does not exit if a variable assignment
     preceding the ‘command’ builtin or another non-special builtin
     fails.

  3. As noted above, Bash requires the ‘xpg_echo’ option to be enabled
     for the ‘echo’ builtin to be fully conformant.

Bash can be configured to be POSIX-conformant by default, by specifying
the ‘--enable-strict-posix-default’ to ‘configure’ when building (*note
Optional Features::).

