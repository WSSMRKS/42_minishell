Builtins:
		- echo with option "-n"
		- cd with only a relative or absolute path
		- pwd with no omplications
		- export with no options
		- unset with no options
		- env with no options or Arguments
		- exit with no options

echo:
	echo the given string. if -n is set. the output is displayed without a newline character.
	Difficulty: easy
	Things to find out: Escaping characters
	!!!! Caution: Bash and zsh behave differently !!!!

	Echo behaviour with pipes: echo will be outputted to the pipe

	Tests bash:
	------
	c4a10c2% bash
	maweiss@c4a10c2:~$ echo bla
	bla
	maweiss@c4a10c2:~$ echo -n bla
	blamaweiss@c4a10c2:~$ echo -n bla
	blamaweiss@c4a10c2:~$ echo -n bla
	blamaweiss@c4a10c2:~$ echo -n bla
	blamaweiss@c4a10c2:~$ echo -n bla
	blamaweiss@c4a10c2:~$ echo -n bla
	blamaweiss@c4a10c2:~$ echo -n bla\n
	blanmaweiss@c4a10c2:~$ echo -n bla\\n
	bla\nmaweiss@c4a10c2:~$ echo -n bla\\n
	bla\nmaweiss@c4a10c2:~$ echo -n blabla
	blablamaweiss@c4a10c2:~$ echo -n blabla\n
	blablanmaweiss@c4a10c2:~$ echo -n "blabla\n"
	blabla\nmaweiss@c4a10c2:~$ echo -n 'blabla\n'
	blabla\nmaweiss@c4a10c2:~$ echo -n blabla\n
	blablanmaweiss@c4a10c2:~$ ^C
	maweiss@c4a10c2:~$
	------

	Tests zsh:
	-----------
	c4a10c2% echo bla
	bla
	c4a10c2% echo $PATH
	/home/maweiss/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
	c4a10c2% echo "$PATH"
	/home/maweiss/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
	c4a10c2% echo '$PATH'
	$PATH
	c4a10c2% echo $PATH
	/home/maweiss/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
	c4a10c2% echo

	c4a10c2% echo -n bla
	bla%                                                                                                    c4a10c2% echo -n bla\n
	blan%                                                                                                   c4a10c2% echo -n 'bla\n'
	bla
	c4a10c2% echo -n "bla\n"
	bla
	c4a10c2% echo -n "bla\n$PATH"
	bla
	/home/maweiss/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin%                                                                                           c4a10c2% echo -n 'bla\n$PATH'
	bla
	$PATH%                                                                                                  c4a10c2% echo -n bla\n$PATH
	blan/home/maweiss/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin%                                                                                       c4a10c2%
	---------------

cd:
	Change working directory relative and absolute. function to use: chdir
	Difficulty: medium
	absolute: pretty straight forward.
	relative: using the pwd variable to form the path
	questions:
	- do i need to implement the special character "~"?
	- where is the users home dir stored?
		--> in the environmental variable $HOME. In the Parser "~" must be replaced by $HOME and then by the value of the variable. In my case "/home/maweiss"

pwd:
	Current working directory is stored in the environmental variable PWD.
	Difficulty: easy
	pretty straight forward

export:
	The export command is used to set an environment variable, making it available to any child process (like scripts or other programs executed by the shell).
	Difficulty: medium

	Important example: Hirarchy of shells and how to make variables available to subprocesses!!
		c4a10c2% bash
		maweiss@c4a10c2:~$ bash
		maweiss@c4a10c2:~$ BLA=61
		maweiss@c4a10c2:~$ echo $BLA
		61
		maweiss@c4a10c2:~$ bash
		maweiss@c4a10c2:~$ echo $BLA

		maweiss@c4a10c2:~$ BLA=1989
		maweiss@c4a10c2:~$ export BLA
		maweiss@c4a10c2:~$ echo $BLA
		1989
		maweiss@c4a10c2:~$ bash
		maweiss@c4a10c2:~$ echo $BLA
		1989


		Uses:
			Exporting a variable:
			When you export a variable, it becomes available to subprocesses spawned by the shell.
				MY_VAR="Hello"
				export MY_VAR
			Now, any child process can access MY_VAR.

			Setting and exporting a variable in one step:
			You can combine variable assignment and export in a single command.
				export MY_VAR="Hello"

			Listing exported variables:
			You can list all exported variables using export without arguments.
				export

		Example:
				export PATH="$PATH:/new/directory"
			This example adds /new/directory to the PATH environment variable, making it available to all subprocesses.
