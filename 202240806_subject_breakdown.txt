Program name		minishell
Turn in files 		Makefile, *.h, *.c
Makefile 			NAME, all, clean, fclean, re
Arguments			any
External functs. 	readline, rl_clear_history, rl_on_new_line,
					rl_replace_line, rl_redisplay, add_history,
					printf, malloc, free, write, access, open, read,
					close, fork, wait, waitpid, wait3, wait4, signal,
					sigaction, sigemptyset, sigaddset, kill, exit,
					getcwd, chdir, stat, lstat, fstat, unlink, execve,
					dup, dup2, pipe, opendir, readdir, closedir,
					strerror, perror, isatty, ttyname, ttyslot, ioctl,
					getenv, tcsetattr, tcgetattr, tgetent, tgetflag,
					tgetnum, tgetstr, tgoto, tputs
Libft authorized 	Yes
Description 		Write a shell


Shell should:
	- Display a prompt when waiting for a new command
	- Have a working history
	- Search and launch the right executable based on PATH
	- Avoid using more than one global variable to indicate received signal. Consider the omplications:
		This approach ensures that your signal handler will not access your main data structures.
		Warning:	Be careful. This global variable cannot provide any other
					information or data access than the number of a received signal.
					Therefore, using "norm" type structures in the global scope is
					forbidden.
	- Not interpret unclosed quotes or special characters which are not required by the subject such as \ (backslash) or ; (semicolon);
	- Handle ' (single quote) which should prevent the shell from interpreting the metacharacters in the quoted sequence.
	- Handle " (double quote) which should prevent the shell from interpreting the metacharacters in the quoted sequence except for $ (dollar sign).
	- Implement redirections:
		- "<" should redirect input.
		- ">" should redirect output.
		- "<<" should be given a delimiter, then read the input until a line containing the delimiter is seen. However, it doesn't have to update the history!
		- ">>" should redirect output in append mode.
	- implement pipes (| character). The output of each command in the pipeline is connected to the input of the next vommand via a pipe.
	- Handle environment variables ($followed by a sequence of characters) which should expand to their value.
	- Handle $? which should expand to the exit status of the most recently executed foreground pipeline.
	- Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash.
	- in interactive mode:
		- ctrl-C displays a new prompt on a new line.
		- ctrl-D exits the shell.
		- ctrl-\ does nothing.
	- your shell must implement the following builtins:
		- echo with option "-n"
		- cd with only a relative or absolute path
		- pwd with no omplications
		- export with no options
		- unset with no options
		- env with no options or Arguments
		- exit with no options
The readline() function can cause memory leaks. You don't have to fix them. But that doesn't mean your own code, yes the code you wrote, can have memory leaks.

You should limit yourself to the subject description. Anything that is not asked is not required.
If you have any doubt about a requirement, take bash as a reference.




