
t_word_desc *make_word(t_token *token)
{
	t_word_desc *word;

	word = ft_calloc(token.len +1);
	word = ft_strncpy(token.cmd.start, token.cmd.len);
	handle_flags();
	return (word);
}


/* create new word and add it to the front of the list */
t_list_words *make_word_list(t_token *token, t_list_words *list)
{
	t_list_words *word;

	word.word  = make_word(token);
	/*
	if (list == NULL)
	{
		list = word;
		// make head of the list
	}
	else
	{
		list.next = word;	
	}
	*/
	/* or
		word.next = list;

	*/
	return (word);
}

t_simple_com *make_simple_cmd(t_token *token, t_simple_com *cmd)
{
	if (cmd == NULL)
	{
		cmd = ft_calloc(sizeof(t_simple_com), 1);
		if (!cmd)
			exit;
	}
	if (token.type == TOKEN_WORD)
	{
		cmd.words = make_word_list(token, cmd.words);
	}
}

int parse(t_token *tokens, t_cmd_list **cmd_list)
{
	(void)tokens;

	*cmd_list = ft_calloc(sizeof(t_cmd_list), 1);
	while (tokens) //parse simple command
	{
		make_simple_cmd(tokens, cmd_list.cmd);
		cmd_list.cmd.word
		tokens = tokens.next;
	}
	
}